import Products from "./product.model.js";
import { createResponse } from "../../common/configs/respone.config.js";
import { handleAsync } from "../../common/utils/handle-asynce.config.js";
import { v2 as cloudinary } from "cloudinary";

// ‚úÖ L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
export const getAllProduct = handleAsync(async (req, res) => {
  const products = await Products.find().sort({ createdAt: -1 });
  if (!products || products.length === 0)
    return createResponse(res, 404, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");
  return createResponse(res, 200, "L·∫•y danh s√°ch s·∫£n ph·∫©m th√†nh c√¥ng", products);
});

// ‚úÖ L·∫•y 1 s·∫£n ph·∫©m
export const getProduct = handleAsync(async (req, res) => {
  const product = await Products.findById(req.params.id);
  if (!product) return createResponse(res, 404, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");
  return createResponse(res, 200, "L·∫•y s·∫£n ph·∫©m th√†nh c√¥ng", product);
});

// ‚úÖ T·∫°o s·∫£n ph·∫©m + upload ·∫£nh Cloudinary
export const createProduct = handleAsync(async (req, res) => {
  try {
    const { shopId, name, description, price, discount, category, weight, stock } = req.body;

    const images = req.files?.map((file) => ({
      url: file.path,
      public_id: file.filename,
    }));

    const product = await Products.create({
      shopId,
      name,
      description,
      price,
      discount,
      category,
      weight,
      stock,
      images,
    });

    return createResponse(res, 201, "‚úÖ T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng", product);
  } catch (err) {
    console.error("Create product error:", err);
    return createResponse(res, 500, "Upload ho·∫∑c t·∫°o s·∫£n ph·∫©m th·∫•t b·∫°i", {
      error: err.message,
    });
  }
});

// ‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m (th√™m ·∫£nh m·ªõi n·∫øu c√≥)
export const updateProduct = handleAsync(async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = { ...req.body };

    if (req.files && req.files.length > 0) {
      updateData.$push = {
        images: req.files.map((file) => ({
          url: file.path,
          public_id: file.filename,
        })),
      };
    }

    const product = await Products.findByIdAndUpdate(id, updateData, { new: true });
    if (!product) return createResponse(res, 404, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");

    return createResponse(res, 200, "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng", product);
  } catch (err) {
    console.error("Update product error:", err);
    return createResponse(res, 500, "L·ªói c·∫≠p nh·∫≠t s·∫£n ph·∫©m", { error: err.message });
  }
});

// ‚úÖ X√≥a s·∫£n ph·∫©m + x√≥a ·∫£nh Cloudinary
export const deleteProduct = handleAsync(async (req, res) => {
  const { id } = req.params;
  const product = await Products.findById(id);
  if (!product) return createResponse(res, 404, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");

  // X√≥a ·∫£nh kh·ªèi Cloudinary
  for (const img of product.images) {
    try {
      await cloudinary.uploader.destroy(img.public_id);
    } catch (err) {
      console.warn("Kh√¥ng th·ªÉ x√≥a ·∫£nh:", img.public_id);
    }
  }

  await Products.findByIdAndDelete(id);
  return createResponse(res, 200, "üóëÔ∏è X√≥a s·∫£n ph·∫©m th√†nh c√¥ng");
});
