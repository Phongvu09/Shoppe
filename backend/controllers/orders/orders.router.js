import express from "express";
import * as orderController from "./order.controller.js";
import { auth } from "../../middlewares/auth.js";
import { canUpdateStatus } from "../../middlewares/checkOrderPermission.js";
import { authMiddleware, restrictTo } from "../../common/middleware/auth.js";
import { USER_ROLE } from "../../common/constant/enum.js";
import { createOrderSchema } from "./order.schema.js";
import { validBodyRequest } from "../../common/middleware/valid-body.middleware.js";

const router = express.Router();

// ðŸ“Œ Láº¥y chi tiáº¿t Ä‘Æ¡n hÃ ng theo id
router.get("/:id", orderController.getOrderById);

// ðŸ“Œ Cáº­p nháº­t Ä‘Æ¡n hÃ ng (vÃ­ dá»¥ Ä‘á»‹a chá»‰, thÃ´ng tin khÃ¡c)
router.patch("/:id", auth, orderController.updateOrder);

// ðŸ“Œ Cáº­p nháº­t tráº¡ng thÃ¡i Ä‘Æ¡n hÃ ng (buyer/seller/admin theo workflow)
router.patch("/:id/status", auth, canUpdateStatus, orderController.updateOrderStatus);

// ðŸ“Œ Táº¡o Ä‘Æ¡n hÃ ng (buyer)
router.post("/", authMiddleware, restrictTo(USER_ROLE.SELLER), validBodyRequest(createOrderSchema), orderController.createOrder);

router.use(authMiddleware, restrictTo(USER_ROLE.ADMIN, USER_ROLE.SELLER))
// ðŸ“Œ Láº¥y táº¥t cáº£ Ä‘Æ¡n hÃ ng (admin, hoáº·c seller láº¥y cá»§a mÃ¬nh)
router.get("/", orderController.getAllOrders);

// ðŸ“Œ XÃ³a Ä‘Æ¡n hÃ ng
router.delete("/:id", auth, orderController.deleteOrder);


export default router;
